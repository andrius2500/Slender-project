{"ast":null,"code":"import _objectSpread from \"C:/Users/Andrius/Desktop/Slender-project/slender-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectDestructuringEmpty from \"C:/Users/Andrius/Desktop/Slender-project/slender-main/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _slicedToArray from \"C:/Users/Andrius/Desktop/Slender-project/slender-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n  var match = splitCSSVariableRegex.exec(current);\n  if (!match) return [,];\n  var _match = _slicedToArray(match, 3),\n    token = _match[1],\n    fallback = _match[2];\n  return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n  var _parseCSSVariable = parseCSSVariable(current),\n    _parseCSSVariable2 = _slicedToArray(_parseCSSVariable, 2),\n    token = _parseCSSVariable2[0],\n    fallback = _parseCSSVariable2[1];\n  // No CSS variable detected\n  if (!token) return;\n  // Attempt to read this CSS variable off the element\n  var resolved = window.getComputedStyle(element).getPropertyValue(token);\n  if (resolved) {\n    var trimmed = resolved.trim();\n    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n  } else if (isCSSVariableToken(fallback)) {\n    // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n    return getVariableValue(fallback, element, depth + 1);\n  } else {\n    return fallback;\n  }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _ref, transitionEnd) {\n  var target = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n  var element = visualElement.current;\n  if (!(element instanceof Element)) return {\n    target: target,\n    transitionEnd: transitionEnd\n  };\n  // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n  // only if they change but I think this reads clearer and this isn't a performance-critical path.\n  if (transitionEnd) {\n    transitionEnd = _objectSpread({}, transitionEnd);\n  }\n  // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n  visualElement.values.forEach(function (value) {\n    var current = value.get();\n    if (!isCSSVariableToken(current)) return;\n    var resolved = getVariableValue(current, element);\n    if (resolved) value.set(resolved);\n  });\n  // Cycle through every target property and resolve CSS variables. Currently\n  // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n  for (var key in target) {\n    var current = target[key];\n    if (!isCSSVariableToken(current)) continue;\n    var resolved = getVariableValue(current, element);\n    if (!resolved) continue;\n    // Clone target if it hasn't already been\n    target[key] = resolved;\n    if (!transitionEnd) transitionEnd = {};\n    // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n    // CSS variable. This will ensure that after the animation the component will reflect\n    // changes in the value of the CSS variable.\n    if (transitionEnd[key] === undefined) {\n      transitionEnd[key] = current;\n    }\n  }\n  return {\n    target: target,\n    transitionEnd: transitionEnd\n  };\n}\nexport { parseCSSVariable, resolveCSSVariables };","map":{"version":3,"names":["invariant","isNumericalString","isCSSVariableToken","splitCSSVariableRegex","parseCSSVariable","current","match","exec","token","fallback","maxDepth","getVariableValue","element","depth","resolved","window","getComputedStyle","getPropertyValue","trimmed","trim","parseFloat","resolveCSSVariables","visualElement","transitionEnd","target","Element","values","forEach","value","get","set","key","undefined"],"sources":["C:/Users/Andrius/Desktop/Slender-project/slender-main/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"sourcesContent":["import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}